name: Build production files

on:
  workflow_dispatch:
    inputs:
      name:
        description: "Name of the folder containing the PCB files. The generated production files will be at 'release/<name>'."
        required: true
        type: string
      overwrite:
        description: "Overwrite existing production files for this board"
        required: false
        type: boolean
        default: false
      erc:
        description: "Include ERC output"
        required: false
        type: boolean
        default: false
      drc:
        description: "Include DRC output"
        required: false
        type: boolean
        default: false
      sch_file:
        description: "Main .kicad_sch file name, defaults to '<name>.kicad_sch'"
        required: false
        type: string
      pcb_file:
        description: "Main .kicad_pcb file name, defaults to '<name>.kicad_pcb'"
        required: false
        type: string
      version:
        description: "Version number to include in info file"
        required: false
        type: string
        default: "v1.0"
      fabrication:
        description: "Manufacturer/fabrication provider name to include in info file"
        required: false
        type: string
      n_layers:
        description: "Number of layers to include in info file (note, gerbers are generated for every layer regardless of this setting)"
        required: false
        type: number

permissions:
  contents: read

jobs:
  init:
    name: Initialise directory in release/ folder and check files exist
    runs-on: ubuntu-24.04

    outputs:
      release_dir: ${{ steps.format.outputs.release_dir }}
      sch_location: ${{ steps.format.outputs.sch_location }}
      pcb_location: ${{ steps.format.outputs.pcb_location }}

    steps:
      - name: Checkout to latest commit
        uses: actions/checkout@v4

      - name: Format names
        id: format
        env:
          NAME: ${{ inputs.name }}
          SCH_FILE: ${{ inputs.sch_file }}
          PCB_FILE: ${{ inputs.pcb_file }}
        run: |
          echo "release_dir=release/${NAME}" >> "$GITHUB_OUTPUT"
          echo "sch_location=${NAME}/${SCH_FILE:-${NAME}.kicad_sch}" >> "$GITHUB_OUTPUT"
          echo "pcb_location=${NAME}/${PCB_FILE:-${NAME}.kicad_pcb}" >> "$GITHUB_OUTPUT"

      - name: Check schematic exists
        env:
          SCH_LOCATION: ${{ steps.format.outputs.sch_location }}
        run: test -f "$SCH_LOCATION"

      - name: Check PCB exists
        env:
          PCB_LOCATION: ${{ steps.format.outputs.pcb_location }}
        run: test -f "$PCB_LOCATION"

      - name: Check for existing release directory
        if: inputs.overwrite == 'false' || inputs.overwrite == false
        env:
          RELEASE_DIR: ${{ steps.format.outputs.release_dir }}
        run: test ! -e "$RELEASE_DIR"

      - name: Setup release directory
        env:
          RELEASE_DIR: ${{ steps.format.outputs.release_dir }}
        run: |
          rm -rf "$RELEASE_DIR"
          mkdir -p "$RELEASE_DIR"

  gen_files:
    name: Generate gerbers, schematic PDF and interactive BOM
    runs-on: ubuntu-24.04
    needs: init

    permissions:
      contents: write

    container:
      image: maartin0/kicadutils

    steps:
      - name: Checkout to latest commit
        uses: actions/checkout@v4

      - name: Add version to info
        if: inputs.version != ''
        env:
          RELEASE_DIR: ${{ needs.init.outputs.release_dir }}
          VERSION: ${{ inputs.version }}
        run: echo "version=${VERSION}" >> "${RELEASE_DIR}/info"

      - name: Add fabrication to info
        if: inputs.fabrication != ''
        env:
          RELEASE_DIR: ${{ needs.init.outputs.release_dir }}
          FABRICATION: ${{ inputs.fabrication }}
        run: echo "fabrication=${FABRICATION}" >> "${RELEASE_DIR}/info"

      - name: Add layers to info
        if: inputs.n_layers != ''
        env:
          RELEASE_DIR: ${{ needs.init.outputs.release_dir }}
          LAYERS: ${{ inputs.n_layers }}
        run: echo "layers=${LAYERS}" >> "${RELEASE_DIR}/info"

      - name: Generate files
        env:
          RELEASE_DIR: ${{ needs.init.outputs.release_dir }}
          SCH_LOCATION: ${{ needs.init.outputs.sch_location }}
          PCB_LOCATION: ${{ needs.init.outputs.pcb_location }}
          RUN_ERC: ${{ inputs.erc }}
          RUN_DRC: ${{ inputs.drc }}
        run: |
          ARGS=""
          [ "$RUN_ERC" = "true" ] && ARGS="--erc"
          [ "$RUN_DRC" = "true" ] && ARGS="$ARGS --drc"
          ./bin/gen.sh "$SCH_LOCATION" "$PCB_LOCATION" "$RELEASE_DIR" $ARGS

      - name: Commit changes
        env:
          NAME: ${{ inputs.name }}
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git config --global --add safe.directory "$(pwd)"
          git add release/
          git commit -m "Automatically generate $NAME production files"
          git push
